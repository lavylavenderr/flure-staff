generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("MAIN_DATABASE_URL")
}

model Staff {
  id Int @id @unique @default(autoincrement())

  avatar    String
  robloxId  String @unique
  discordId String @unique

  robloxUsername  String
  discordUsername String

  rank   Rank @relation(references: [id], fields: [rankId])
  rankId Int

  sessions        Session[]
  hostedFlights   Flight[]  @relation("Host")
  attendedFlights Flight[]  @relation("Attendees")

  flightSignups       FlightSignup[]
  captainFlights      Flight[]       @relation("CaptainOfFlight")
  firstOfficerFlights Flight[]       @relation("FirstOfficerOfFlight")

  inflightTLFlights  Flight[] @relation("InflightTL")
  groundOpsTLFlights Flight[] @relation("GroundOpsTL")
  sesTLFlights       Flight[] @relation("SesTL")

  suspended Boolean @default(false)
}

model FlightSignup {
  id Int @id @unique @default(autoincrement())

  flight   Flight @relation(fields: [flightId], references: [id])
  flightId Int

  staff   Staff @relation(fields: [staffId], references: [id])
  staffId Int

  preferredRole String?
}

model Session {
  id String @id

  ipAddress String
  userAgent String

  expiresAt DateTime
  createdAt DateTime @default(now())

  staff  Staff @relation(fields: [userId], references: [id])
  userId Int
}

model Flight {
  // Actual Flight Info

  id           Int          @id @unique @default(autoincrement())
  flightNumber String
  flightStatus FlightStatus // schedulled = enough staff, cancelled = cancelled, requested = waiting for enough leadership staff
  attendees    Staff[]      @relation("Attendees")

  signUps FlightSignup[]

  airport  String
  aircraft String
  gate     String

  // Host Info

  host   Staff @relation("Host", references: [id], fields: [hostId])
  hostId Int

  // Flight Deck

  captain   Staff? @relation("CaptainOfFlight", fields: [captainId], references: [id])
  captainId Int

  firstOfficer   Staff? @relation("FirstOfficerOfFlight", fields: [firstOfficerId], references: [id])
  firstOfficerId Int

  // Team Leads

  inflightTL   Staff? @relation("InflightTL", fields: [inflightTLId], references: [id])
  inflightTLId Int?

  groundOpsTL   Staff? @relation("GroundOpsTL", fields: [groundOpsTLId], references: [id])
  groundOpsTLId Int?

  sesTL   Staff? @relation("SesTL", fields: [sesTLId], references: [id])
  sesTLId Int?

  dateTime DateTime
}

enum FlightStatus {
  Scheduled
  Cancelled
  Requested
}

model Rank {
  id           Int    @id @unique @default(autoincrement())
  displayOrder Int    @default(autoincrement()) // In order it'll be displayed on the staff list, and to prevent a staff giving themselves a higher role
  name         String

  staff Staff[] // Self explainitory, staff that have the role, they can only have one at any given time.

  manageLOA       Boolean @default(false)
  manageFlights   Boolean @default(false)
  manageBlacklist Boolean @default(false) // Manage Flure Blacklist, list of banned users can be accessed via an endpoint
  manageStaff     Boolean @default(false) // Displinary Actions, Create New Staff, update Existing staff
  manageTrainings Boolean @default(false) // Add trainings, create trainings, add attendees
  isFlureLead     Boolean @default(false) // Add docs for staff to view
}
